<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
	
	<!-- Root Context: defines shared resources visible to all other web components -->
	<bean id="messageSource"
		class="org.springframework.context.support.ReloadableResourceBundleMessageSource">
		<property name="basename">
			<value>WEB-INF/messages/spring_security_messages</value>
		</property>
	</bean>

	<!-- properties 암호화 -->
	
	<!--                                                                      -->
	<!-- Configuration for encryptor, based on environment variables.         -->
	<!--                                                                      -->
	<!-- In this example, the encryption password will be read from an        -->
	<!-- environment variable called "APP_ENCRYPTION_PASSWORD" which, once    --> 
	<!-- the application has been started, could be safely unset.             -->
	<!--                                                                      -->
	<bean id="environmentVariablesConfiguration"
		class="org.jasypt.encryption.pbe.config.EnvironmentStringPBEConfig"
		p:algorithm="PBEWithMD5AndDES" 
		p:passwordEnvName="APP_ENCRYPTION_PASSWORD" />
	
	<!--                                                                      -->
 	<!-- The will be the encryptor used for decrypting configuration values.  -->
 	<!--                                                                      -->
	<bean id="configurationEncryptor" 
		class="org.jasypt.encryption.pbe.StandardPBEStringEncryptor"
		p:config-ref="environmentVariablesConfiguration" 
		p:password="encryptgno" />    <!-- password는 이따 비밀번호 생성시 필요합니다. -->
	
	<!--                                                                      -->
	<!-- The EncryptablePropertyPlaceholderConfigurer will read the           -->
	<!-- .properties files and make their values accessible as ${var}.        -->
	<!--                                                                      -->
	<!-- Our "configurationEncryptor" bean (which implements                  --> 
	<!-- org.jasypt.encryption.StringEncryptor) is set as a constructor arg.  -->
	<!--                                                                      -->
	<bean id="propertyConfigurer"
		class="org.jasypt.spring31.properties.EncryptablePropertyPlaceholderConfigurer">
		<constructor-arg ref="configurationEncryptor" />
		<property name="locations">
			<list>
				<value>WEB-INF/property/jdbc.properties</value>
				<value>WEB-INF/property/key.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		p:driverClassName="${jdbc.driverClassName}" 
		p:url="${jdbc.url}"
		p:username="${jdbc.username}" 
		p:password="${jdbc.password}">
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="mapperLocations" value="classpath*:mappers/*Mapper.xml" />
	</bean>

	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg index="0" ref="sqlSessionFactory" />
	</bean>
	<!-- 
	<bean id="advice" class="com.latis.test.advice.AopAdvice"></bean>

	<aop:config>
		<aop:pointcut id="target"
			expression="execution(* com.latis.test.HomeController.*(..))" />
			
		<aop:aspect ref="advice">
			<aop:before pointcut-ref="target" method="beforeMethod"/>
			<aop:after-returning pointcut-ref="target" method="afterReturningMethod" returning="retVal"/>
			<aop:after-throwing pointcut-ref="target" method="afterThrowingMethod" throwing="exception"/>
			<aop:after pointcut-ref="target" method="afterMethod"/>
			<aop:around pointcut-ref="target" method="aroundMethod"/>			
		</aop:aspect>
	</aop:config>
	 -->
</beans>
